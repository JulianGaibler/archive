// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateKeyword {
  count: Int!
}

type AggregateMeme {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Keyword {
  id: ID!
  name: String!
}

type KeywordConnection {
  pageInfo: PageInfo!
  edges: [KeywordEdge]!
  aggregate: AggregateKeyword!
}

input KeywordCreateInput {
  name: String!
}

input KeywordCreateManyInput {
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

type KeywordEdge {
  node: Keyword!
  cursor: String!
}

enum KeywordOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type KeywordPreviousValues {
  id: ID!
  name: String!
}

input KeywordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [KeywordScalarWhereInput!]
  OR: [KeywordScalarWhereInput!]
  NOT: [KeywordScalarWhereInput!]
}

type KeywordSubscriptionPayload {
  mutation: MutationType!
  node: Keyword
  updatedFields: [String!]
  previousValues: KeywordPreviousValues
}

input KeywordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: KeywordWhereInput
  AND: [KeywordSubscriptionWhereInput!]
  OR: [KeywordSubscriptionWhereInput!]
  NOT: [KeywordSubscriptionWhereInput!]
}

input KeywordUpdateDataInput {
  name: String
}

input KeywordUpdateInput {
  name: String
}

input KeywordUpdateManyDataInput {
  name: String
}

input KeywordUpdateManyInput {
  create: [KeywordCreateInput!]
  update: [KeywordUpdateWithWhereUniqueNestedInput!]
  upsert: [KeywordUpsertWithWhereUniqueNestedInput!]
  delete: [KeywordWhereUniqueInput!]
  connect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  disconnect: [KeywordWhereUniqueInput!]
  deleteMany: [KeywordScalarWhereInput!]
  updateMany: [KeywordUpdateManyWithWhereNestedInput!]
}

input KeywordUpdateManyMutationInput {
  name: String
}

input KeywordUpdateManyWithWhereNestedInput {
  where: KeywordScalarWhereInput!
  data: KeywordUpdateManyDataInput!
}

input KeywordUpdateWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateDataInput!
}

input KeywordUpsertWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput!
  update: KeywordUpdateDataInput!
  create: KeywordCreateInput!
}

input KeywordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
}

input KeywordWhereUniqueInput {
  id: ID
}

scalar Long

type Meme {
  id: ID!
  title: String!
  created: DateTime!
  keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword!]
  uploader: User!
  path: String!
  caption: String
}

type MemeConnection {
  pageInfo: PageInfo!
  edges: [MemeEdge]!
  aggregate: AggregateMeme!
}

input MemeCreateInput {
  title: String!
  created: DateTime!
  keywords: KeywordCreateManyInput
  uploader: UserCreateOneInput!
  path: String!
  caption: String
}

type MemeEdge {
  node: Meme!
  cursor: String!
}

enum MemeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  created_ASC
  created_DESC
  path_ASC
  path_DESC
  caption_ASC
  caption_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MemePreviousValues {
  id: ID!
  title: String!
  created: DateTime!
  path: String!
  caption: String
}

type MemeSubscriptionPayload {
  mutation: MutationType!
  node: Meme
  updatedFields: [String!]
  previousValues: MemePreviousValues
}

input MemeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MemeWhereInput
  AND: [MemeSubscriptionWhereInput!]
  OR: [MemeSubscriptionWhereInput!]
  NOT: [MemeSubscriptionWhereInput!]
}

input MemeUpdateInput {
  title: String
  created: DateTime
  keywords: KeywordUpdateManyInput
  uploader: UserUpdateOneRequiredInput
  path: String
  caption: String
}

input MemeUpdateManyMutationInput {
  title: String
  created: DateTime
  path: String
  caption: String
}

input MemeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  created: DateTime
  created_not: DateTime
  created_in: [DateTime!]
  created_not_in: [DateTime!]
  created_lt: DateTime
  created_lte: DateTime
  created_gt: DateTime
  created_gte: DateTime
  keywords_every: KeywordWhereInput
  keywords_some: KeywordWhereInput
  keywords_none: KeywordWhereInput
  uploader: UserWhereInput
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  AND: [MemeWhereInput!]
  OR: [MemeWhereInput!]
  NOT: [MemeWhereInput!]
}

input MemeWhereUniqueInput {
  id: ID
}

type Mutation {
  createKeyword(data: KeywordCreateInput!): Keyword!
  updateKeyword(data: KeywordUpdateInput!, where: KeywordWhereUniqueInput!): Keyword
  updateManyKeywords(data: KeywordUpdateManyMutationInput!, where: KeywordWhereInput): BatchPayload!
  upsertKeyword(where: KeywordWhereUniqueInput!, create: KeywordCreateInput!, update: KeywordUpdateInput!): Keyword!
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteManyKeywords(where: KeywordWhereInput): BatchPayload!
  createMeme(data: MemeCreateInput!): Meme!
  updateMeme(data: MemeUpdateInput!, where: MemeWhereUniqueInput!): Meme
  updateManyMemes(data: MemeUpdateManyMutationInput!, where: MemeWhereInput): BatchPayload!
  upsertMeme(where: MemeWhereUniqueInput!, create: MemeCreateInput!, update: MemeUpdateInput!): Meme!
  deleteMeme(where: MemeWhereUniqueInput!): Meme
  deleteManyMemes(where: MemeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword]!
  keywordsConnection(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeywordConnection!
  meme(where: MemeWhereUniqueInput!): Meme
  memes(where: MemeWhereInput, orderBy: MemeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meme]!
  memesConnection(where: MemeWhereInput, orderBy: MemeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  keyword(where: KeywordSubscriptionWhereInput): KeywordSubscriptionPayload
  meme(where: MemeSubscriptionWhereInput): MemeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  username: String!
  name: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  name: String!
  password: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  username: String!
  name: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  name: String
  password: String
}

input UserUpdateInput {
  username: String
  name: String
  password: String
}

input UserUpdateManyMutationInput {
  username: String
  name: String
  password: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  username: String
}
`