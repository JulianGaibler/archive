// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateKeyword {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

enum Format {
  VIDEO
  IMAGE
  GIF
}

type Keyword {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type KeywordConnection {
  pageInfo: PageInfo!
  edges: [KeywordEdge]!
  aggregate: AggregateKeyword!
}

input KeywordCreateInput {
  name: String!
  posts: PostCreateManyWithoutKeywordsInput
}

input KeywordCreateManyWithoutPostsInput {
  create: [KeywordCreateWithoutPostsInput!]
  connect: [KeywordWhereUniqueInput!]
}

input KeywordCreateWithoutPostsInput {
  name: String!
}

type KeywordEdge {
  node: Keyword!
  cursor: String!
}

enum KeywordOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type KeywordPreviousValues {
  id: ID!
  name: String!
}

input KeywordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [KeywordScalarWhereInput!]
  OR: [KeywordScalarWhereInput!]
  NOT: [KeywordScalarWhereInput!]
}

type KeywordSubscriptionPayload {
  mutation: MutationType!
  node: Keyword
  updatedFields: [String!]
  previousValues: KeywordPreviousValues
}

input KeywordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: KeywordWhereInput
  AND: [KeywordSubscriptionWhereInput!]
  OR: [KeywordSubscriptionWhereInput!]
  NOT: [KeywordSubscriptionWhereInput!]
}

input KeywordUpdateInput {
  name: String
  posts: PostUpdateManyWithoutKeywordsInput
}

input KeywordUpdateManyDataInput {
  name: String
}

input KeywordUpdateManyMutationInput {
  name: String
}

input KeywordUpdateManyWithoutPostsInput {
  create: [KeywordCreateWithoutPostsInput!]
  delete: [KeywordWhereUniqueInput!]
  connect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  disconnect: [KeywordWhereUniqueInput!]
  update: [KeywordUpdateWithWhereUniqueWithoutPostsInput!]
  upsert: [KeywordUpsertWithWhereUniqueWithoutPostsInput!]
  deleteMany: [KeywordScalarWhereInput!]
  updateMany: [KeywordUpdateManyWithWhereNestedInput!]
}

input KeywordUpdateManyWithWhereNestedInput {
  where: KeywordScalarWhereInput!
  data: KeywordUpdateManyDataInput!
}

input KeywordUpdateWithoutPostsDataInput {
  name: String
}

input KeywordUpdateWithWhereUniqueWithoutPostsInput {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateWithoutPostsDataInput!
}

input KeywordUpsertWithWhereUniqueWithoutPostsInput {
  where: KeywordWhereUniqueInput!
  update: KeywordUpdateWithoutPostsDataInput!
  create: KeywordCreateWithoutPostsInput!
}

input KeywordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
}

input KeywordWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createKeyword(data: KeywordCreateInput!): Keyword!
  updateKeyword(data: KeywordUpdateInput!, where: KeywordWhereUniqueInput!): Keyword
  updateManyKeywords(data: KeywordUpdateManyMutationInput!, where: KeywordWhereInput): BatchPayload!
  upsertKeyword(where: KeywordWhereUniqueInput!, create: KeywordCreateInput!, update: KeywordUpdateInput!): Keyword!
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteManyKeywords(where: KeywordWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  created: DateTime!
  keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword!]
  type: Format!
  originalPath: String!
  thumbnailPath: String!
  uploader: User
  caption: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  created: DateTime!
  keywords: KeywordCreateManyWithoutPostsInput
  type: Format!
  originalPath: String!
  thumbnailPath: String!
  uploader: UserCreateOneInput
  caption: String
}

input PostCreateManyWithoutKeywordsInput {
  create: [PostCreateWithoutKeywordsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutKeywordsInput {
  title: String!
  created: DateTime!
  type: Format!
  originalPath: String!
  thumbnailPath: String!
  uploader: UserCreateOneInput
  caption: String
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  created_ASC
  created_DESC
  type_ASC
  type_DESC
  originalPath_ASC
  originalPath_DESC
  thumbnailPath_ASC
  thumbnailPath_DESC
  caption_ASC
  caption_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  created: DateTime!
  type: Format!
  originalPath: String!
  thumbnailPath: String!
  caption: String
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  created: DateTime
  created_not: DateTime
  created_in: [DateTime!]
  created_not_in: [DateTime!]
  created_lt: DateTime
  created_lte: DateTime
  created_gt: DateTime
  created_gte: DateTime
  type: Format
  type_not: Format
  type_in: [Format!]
  type_not_in: [Format!]
  originalPath: String
  originalPath_not: String
  originalPath_in: [String!]
  originalPath_not_in: [String!]
  originalPath_lt: String
  originalPath_lte: String
  originalPath_gt: String
  originalPath_gte: String
  originalPath_contains: String
  originalPath_not_contains: String
  originalPath_starts_with: String
  originalPath_not_starts_with: String
  originalPath_ends_with: String
  originalPath_not_ends_with: String
  thumbnailPath: String
  thumbnailPath_not: String
  thumbnailPath_in: [String!]
  thumbnailPath_not_in: [String!]
  thumbnailPath_lt: String
  thumbnailPath_lte: String
  thumbnailPath_gt: String
  thumbnailPath_gte: String
  thumbnailPath_contains: String
  thumbnailPath_not_contains: String
  thumbnailPath_starts_with: String
  thumbnailPath_not_starts_with: String
  thumbnailPath_ends_with: String
  thumbnailPath_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  created: DateTime
  keywords: KeywordUpdateManyWithoutPostsInput
  type: Format
  originalPath: String
  thumbnailPath: String
  uploader: UserUpdateOneInput
  caption: String
}

input PostUpdateManyDataInput {
  title: String
  created: DateTime
  type: Format
  originalPath: String
  thumbnailPath: String
  caption: String
}

input PostUpdateManyMutationInput {
  title: String
  created: DateTime
  type: Format
  originalPath: String
  thumbnailPath: String
  caption: String
}

input PostUpdateManyWithoutKeywordsInput {
  create: [PostCreateWithoutKeywordsInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutKeywordsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutKeywordsInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutKeywordsDataInput {
  title: String
  created: DateTime
  type: Format
  originalPath: String
  thumbnailPath: String
  uploader: UserUpdateOneInput
  caption: String
}

input PostUpdateWithWhereUniqueWithoutKeywordsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutKeywordsDataInput!
}

input PostUpsertWithWhereUniqueWithoutKeywordsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutKeywordsDataInput!
  create: PostCreateWithoutKeywordsInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  created: DateTime
  created_not: DateTime
  created_in: [DateTime!]
  created_not_in: [DateTime!]
  created_lt: DateTime
  created_lte: DateTime
  created_gt: DateTime
  created_gte: DateTime
  keywords_every: KeywordWhereInput
  keywords_some: KeywordWhereInput
  keywords_none: KeywordWhereInput
  type: Format
  type_not: Format
  type_in: [Format!]
  type_not_in: [Format!]
  originalPath: String
  originalPath_not: String
  originalPath_in: [String!]
  originalPath_not_in: [String!]
  originalPath_lt: String
  originalPath_lte: String
  originalPath_gt: String
  originalPath_gte: String
  originalPath_contains: String
  originalPath_not_contains: String
  originalPath_starts_with: String
  originalPath_not_starts_with: String
  originalPath_ends_with: String
  originalPath_not_ends_with: String
  thumbnailPath: String
  thumbnailPath_not: String
  thumbnailPath_in: [String!]
  thumbnailPath_not_in: [String!]
  thumbnailPath_lt: String
  thumbnailPath_lte: String
  thumbnailPath_gt: String
  thumbnailPath_gte: String
  thumbnailPath_contains: String
  thumbnailPath_not_contains: String
  thumbnailPath_starts_with: String
  thumbnailPath_not_starts_with: String
  thumbnailPath_ends_with: String
  thumbnailPath_not_ends_with: String
  uploader: UserWhereInput
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword]!
  keywordsConnection(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeywordConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  keyword(where: KeywordSubscriptionWhereInput): KeywordSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  username: String!
  name: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  name: String!
  password: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  username: String!
  name: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  name: String
  password: String
}

input UserUpdateInput {
  username: String
  name: String
  password: String
}

input UserUpdateManyMutationInput {
  username: String
  name: String
  password: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  username: String
}
`