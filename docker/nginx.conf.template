# WebSocket connection upgrade mapping
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80;
    server_name _;

    # Increase client_max_body_size for this server if needed for larger uploads
    client_max_body_size 100M;

    # WebSocket endpoint - most specific location first
    location = /api/websocket {
        proxy_pass http://${DOCKER_BACKEND_HOST}:${BACKEND_PORT}/websocket;
        # Forward headers properly through the proxy chain
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_redirect off;
        
        # WebSocket specific headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # WebSocket timeout settings
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 3600s;
        
        # Disable buffering for WebSocket
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # GraphQL API and other backend endpoints
    location /api/ {
        # Use the uploads zone for potentially large GraphQL mutations with file uploads
        limit_req zone=uploads burst=5 nodelay;
        limit_req_status 429;
        
        # Forward to backend (strip /api/ prefix by adding trailing slash)
        proxy_pass http://${DOCKER_BACKEND_HOST}:${BACKEND_PORT}/;
        # Forward headers properly through the proxy chain
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_redirect off;
        
        # WebSocket support for GraphQL subscriptions
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Extended timeouts for file uploads and complex queries
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Disable buffering for real-time GraphQL and file uploads
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_max_temp_file_size 0;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # Static media files - direct file serving with optimized caching
    location /files/ {
        alias /var/www/archive/files/;
        
        # Different caching strategies for different media types
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
        
        location ~* \.(mp4|webm|ogg|mp3|wav|flac|aac)$ {
            expires 30d;
            add_header Cache-Control "public";
            # Enable range requests for media streaming
            add_header Accept-Ranges bytes;
        }
        
        # Default caching for other files under /files/
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # CORS headers for media files
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Range" always;
        
        # Security
        add_header X-Content-Type-Options "nosniff" always;
        
        # Try to serve files, return 404 if not found
        try_files $uri =404;
        
        # Separate access log for media files
        access_log /var/log/nginx/media.access.log main;
    }
    
    # Astro generated assets (_astro directory) - highest cache priority
    location ^~ /_astro/ {
        root /var/www/archive/static;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        add_header X-Content-Type-Options "nosniff";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
    }
    
    # Static assets (JS, CSS) with aggressive caching
    location ~* \.(js|css)$ {
        root /var/www/archive/static;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        add_header X-Content-Type-Options "nosniff";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
    }
    
    # Images and fonts with moderate caching
    location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        root /var/www/archive/static;
        expires 30d;
        add_header Cache-Control "public";
        add_header Access-Control-Allow-Origin "*";
        add_header X-Content-Type-Options "nosniff";
        add_header Vary "Accept-Encoding";
        try_files $uri =404;
    }

    # Main application routes - serve static files first, then proxy to Astro SSR
    location / {
        root /var/www/archive/static;
        
        # Try to serve static files first, then fallback to SSR
        try_files $uri $uri/index.html @astro_ssr;
        
        # Light caching for HTML files
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }
    
    # Astro SSR fallback for dynamic routes
    location @astro_ssr {
        # Use general API rate limiting for SSR requests
        limit_req zone=api burst=20 nodelay;

        proxy_pass http://${DOCKER_FRONTEND_HOST}:${FRONTEND_PORT};

        # Forward headers
        proxy_set_header Host $host;
        proxy_set_header Origin $http_origin;  # This is correct
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Forwarded-Host $http_x_forwarded_host;
        proxy_redirect off;

        # WebSocket support for Astro dev features
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Standard timeout settings for SSR
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Disable buffering for real-time SSR and streaming responses
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Common static files with special handling
    location = /favicon.ico {
        root /var/www/archive/static;
        expires 30d;
        add_header Cache-Control "public";
        access_log off;
        try_files $uri =404;
    }

    location = /robots.txt {
        root /var/www/archive/static;
        expires 1d;
        add_header Cache-Control "public";
        access_log off;
        try_files $uri =404;
    }

    # Custom error pages
    error_page 404 /404.html;
    error_page 429 /429.html;
    error_page 500 502 503 504 /50x.html;

    # Logs
    access_log /var/log/nginx/archive.access.log main;
    error_log /var/log/nginx/archive.error.log warn;
}