---
import Layout from '@src/layouts/Layout.astro'
import Wall from '@src/components/Wall.svelte'
import ErrorPage from '@src/components/ErrorPage.astro'

import { getSdk } from '@src/generated/graphql'
import { handleError, hasAuthenticationError } from '@src/utils/error-handling'

const ssrClient = Astro.locals.gqlClient
const sdk = getSdk(ssrClient)
const { keywordId } = Astro.params

// Ensure keywordId is defined
if (!keywordId) {
  throw new Error('Keyword ID is required')
}

let result: Awaited<ReturnType<typeof sdk.KeywordWithPosts>> | null = null
let error: ReturnType<typeof handleError> | null = null

try {
  result = await sdk.KeywordWithPosts({
    nodeId: keywordId,
  })
  error = hasAuthenticationError(result, Astro.response)
  if (!error && !result.data?.keyword) {
    error = handleError(404, Astro.response)
  }
} catch (graphqlError: unknown) {
  console.error('GraphQL error in [keywordId].astro:', graphqlError)

  // Determine appropriate status code based on error
  let statusCode = 500
  if (
    graphqlError &&
    typeof graphqlError === 'object' &&
    'message' in graphqlError
  ) {
    const message = (graphqlError as { message: string }).message
    if (message.toLowerCase().includes('not found')) {
      statusCode = 404
    }
  }

  error = handleError(statusCode, Astro.response, graphqlError)
}
---

{
  error ? (
    <ErrorPage error={error} />
  ) : (
    <Layout
      title={`Archive - ${result!.data?.keyword?.__typename === 'Keyword' ? result!.data.keyword.name : 'Keyword'}`}
    >
      <div class="tint--tinted nav">
        <div class="shrinkwrap">
          {result!.data?.keyword?.__typename === 'Keyword' && (
            <>
              <h1 class="tint--type-title-serif-1 keyword-title">
                {result!.data.keyword.name}
              </h1>
              <span class="tint--type-body-sans post-count">
                {result!.data.keyword.postCount} posts
              </span>
            </>
          )}
        </div>
      </div>
      <Wall
        client:load
        results={{ posts: result!.data.posts }}
        byKeywords={[keywordId]}
      />
    </Layout>
  )
}

<style lang="sass">
  .nav
    background-color: var(--tint-bg)
    padding-block: tint.$size-24
    margin-block-end: tint.$size-2
    .shrinkwrap
      display: flex
      align-items: baseline
      gap: 0 tint.$size-16
      flex-wrap: wrap

  .post-count
    color: var(--tint-text-secondary)
</style>
