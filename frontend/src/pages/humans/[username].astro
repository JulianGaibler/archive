---
import Layout from '@src/layouts/Layout.astro'
import Wall from '@src/components/Wall.svelte'
import ErrorPage from '@src/components/ErrorPage.astro'
import UserPicture from '@src/components/UserPicture.svelte'

import { getSdk } from '@src/generated/graphql'
import { handleError, hasAuthenticationError } from '@src/utils/error-handling'

const ssrClient = Astro.locals.gqlClient
const sdk = getSdk(ssrClient)
const { username } = Astro.params

// Ensure username is defined
if (!username) {
  throw new Error('Username is required')
}

let result: Awaited<ReturnType<typeof sdk.UserWithPosts>> | null = null
let error: ReturnType<typeof handleError> | null = null

try {
  result = await sdk.UserWithPosts({
    username: username,
  })
  error = hasAuthenticationError(result, Astro.response)
  if (!error && !result.data?.user) {
    error = handleError(404, Astro.response)
  }
} catch (graphqlError: unknown) {
  console.error('GraphQL error in [username].astro:', graphqlError)

  // Determine appropriate status code based on error
  let statusCode = 500
  if (
    graphqlError &&
    typeof graphqlError === 'object' &&
    'message' in graphqlError
  ) {
    const message = (graphqlError as { message: string }).message
    if (message.toLowerCase().includes('not found')) {
      statusCode = 404
    }
  }

  error = handleError(statusCode, Astro.response, graphqlError)
}
---

{
  error ? (
    <ErrorPage error={error} />
  ) : (
    <Layout
      title={result!.data?.user?.name || result!.data?.user?.username || 'User'}
    >
      <div class="tint--tinted nav">
        {result!.data?.user && (
          <>
            <div class="shrinkwrap user-header">
              <UserPicture user={result!.data.user} size="128" />
              <div class="user-details">
                <span class="name tint--type-body-sans-large">
                  {result!.data.user.name}
                </span>
                <span class="username tint--type-body-sans">
                  @{result!.data.user.username}
                </span>
              </div>
              <div class="badge tint--type-action">
                {result!.data.user.postCount || 0} posts
              </div>
            </div>
          </>
        )}
      </div>
      <Wall
        client:load
        results={{ posts: result!.data.posts }}
        byUsers={[username]}
      />
    </Layout>
  )
}

<style lang="sass">
  .nav
    background-color: var(--tint-bg)
    padding-block: tint.$size-24
    margin-block-end: tint.$size-2
    .shrinkwrap
      display: flex
      align-items: center
      gap: tint.$size-16
      flex-wrap: wrap

  .user-header
    display: flex
    align-items: center
    gap: tint.$size-16
    border-radius: tint.$card-radius

  .user-details
    display: flex
    flex-direction: column
    gap: tint.$size-4
    flex-grow: 1
    > span
      overflow: hidden
      text-overflow: ellipsis
      white-space: nowrap
    .username
      color: var(--tint-text-secondary)

  .name
    margin: 0

  .username
    color: var(--tint-text-secondary)

  .badge
    color: var(--tint-text-secondary)
    border-radius: tint.$size-64
    border: 1px solid
    padding-inline: tint.$size-8
    padding-block: tint.$size-4
</style>
