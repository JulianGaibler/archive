---
import Layout from '@src/layouts/Layout.astro'
import TelegramLinking, {
  type TelegramUser,
} from '@src/components/TelegramLinking.svelte'
import { hasAuthenticationError, handleError } from '@src/utils/page-errors'
import ErrorPage from '@src/components/ErrorPage.astro'

const searchParams = new URL(Astro.request.url).searchParams
const { me } = Astro.locals.me

// Parse and validate Telegram user data from searchParams
function parseTelegramUserFromParams(
  params: URLSearchParams,
): TelegramUser | null {
  const id = params.get('id')
  const auth_date = params.get('auth_date')
  const hash = params.get('hash')

  // Check if all required fields are present
  if (!id || !auth_date || !hash) {
    return null
  }

  const first_name = params.get('first_name')
  const last_name = params.get('last_name')
  const username = params.get('username')
  const photo_url = params.get('photo_url')

  // Validate that id and auth_date are valid numbers
  const parsedId = parseInt(id, 10)
  const parsedAuthDate = parseInt(auth_date, 10)

  if (isNaN(parsedId) || isNaN(parsedAuthDate)) {
    return null
  }

  return {
    id: parsedId,
    first_name: first_name || undefined,
    last_name: last_name || undefined,
    username: username || undefined,
    photo_url: photo_url || undefined,
    auth_date: parsedAuthDate,
    hash,
  }
}

const telegramUserData = parseTelegramUserFromParams(searchParams)

// Create the auth URL for Telegram widget redirect
const authUrl = new URL(Astro.request.url)
authUrl.search = '' // Clear existing params for clean redirect URL

const pageError = me
  ? hasAuthenticationError(me, Astro.response)
  : handleError(500, Astro.response)
---

{
  pageError ? (
    <ErrorPage error={pageError} />
  ) : (
    <Layout title="Link Telegram">
      <div class="tint--tinted nav">
        <div class="shrinkwrap">
          <h1 class="tint--type">Link Telegram</h1>
        </div>
      </div>

      <div class="shrinkwrap content">
        <TelegramLinking
          client:load
          me={me!.data?.me}
          telegramUserData={telegramUserData}
          authUrl={authUrl.toString()}
        />
      </div>
    </Layout>
  )
}

<style lang="sass">
  .nav
    background-color: var(--tint-bg)
    padding-block: tint.$size-24
    margin-block-end: tint.$size-16

  .content
    display: flex
    flex-direction: column
    gap: tint.$size-24
</style>
