// vite-plugin-frontend-env.js

/**
 * Vite plugin to replace env.ts with a simple default export object
 * containing only the specified environment variables
 */
export function frontendEnvPlugin(options = {}) {
  const {
    // Array of environment variable names to inject
    envVars = [],
    // File pattern to match (your env.ts file)
    filePattern = /env\.(ts|js)$/,
    // Whether to include debug logging
    debug = false
  } = options;

  return {
    name: 'frontend-env-replacement',
    
    transform(code, id) {
      // Only transform files that match our pattern
      if (!filePattern.test(id)) {
        return null;
      }

      if (debug) {
        console.log(`Frontend ENV Plugin: Transforming ${id}`);
      }

      // Build the environment object from specified variables
      const envObject = {};
      const missingVars = [];

      for (const varName of envVars) {
        const value = process.env[varName];
        if (value !== undefined) {
          envObject[varName] = value;
        } else {
          missingVars.push(varName);
          if (debug) {
            console.warn(`Frontend ENV Plugin: Missing variable ${varName}`);
          }
        }
      }

      if (debug) {
        console.log('Frontend ENV Plugin: Injected variables:', Object.keys(envObject));
      }

      // Detect if this is a TypeScript file
      const isTypeScript = false; // id.endsWith('.ts');

      // Generate the complete replacement file
      const replacementCode = `/**
 * Environment variables injected at build time
 * Generated by vite-plugin-frontend-env on ${new Date().toISOString()}
 * 
 * Original file was replaced during build process.
 */

const env = ${JSON.stringify(envObject, null, 2)};

export default env;

${isTypeScript ? `
// Type definitions for the injected environment
export type EnvConfig = typeof env;
` : ''}`;

      console.log(`replacementCode, id: ${id}`, replacementCode);

      return {
        code: replacementCode,
        map: null
      };
    },

    // Add build-time flags
    config(config) {
      config.define = config.define || {};
      
      // Add a build-time flag to detect this was processed
      config.define['import.meta.env.ENV_INJECTED_AT_BUILD'] = JSON.stringify(true);
      
      if (debug) {
        config.define['import.meta.env.ENV_DEBUG_INFO'] = JSON.stringify({
          injectedVars: envVars,
          buildTime: new Date().toISOString()
        });
      }
    }
  };
}